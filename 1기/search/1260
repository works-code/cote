// 미완성
Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int V = sc.nextInt();
        Map<Integer, List<Integer>> arr = new HashMap<>();
        // 데이터 셋팅
        for(int i = 0; i < M; i++){
            int start = sc.nextInt();
            int end = sc.nextInt();
            addNode(arr, start, end);
            addNode(arr, end, start);
        }
        // DFS
        Stack<Integer> stack = new Stack<>();
        stack.add(V);
        DFS(stack, arr, new boolean[N+1]);
        System.out.println("");
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(V);
        BFS(queue, arr, new boolean[N+1]);
    }
    public static void DFS(Stack<Integer> stack, Map<Integer, List<Integer>> arr, boolean [] vistied){
        while (!stack.isEmpty()){
            int index = stack.pop();
            if(vistied[index] == false){
                System.out.print(index + " ");
                vistied[index] = true;
                List<Integer> datas = arr.get(index);
                Collections.sort(datas,Collections.reverseOrder());
                stack.addAll(datas);
            }
        }
    }
    public static void BFS(Queue<Integer> queue, Map<Integer, List<Integer>> arr, boolean [] vistied){
        while (!queue.isEmpty()){
            int index = queue.poll();
            if(vistied[index] == false){
                System.out.print(index + " ");
                vistied[index] = true;
                List<Integer> datas = arr.get(index);
                Collections.sort(datas);
                queue.addAll(datas);
            }
        }
    }
    public static void addNode(Map<Integer, List<Integer>> arr, int key, int val){
        List<Integer> nodes = arr.get(key);
        if(nodes == null){
            nodes = new ArrayList<>();
        }
        nodes.add(val);
        arr.put(key, nodes);
    }